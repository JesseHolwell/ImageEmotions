@{
    ViewBag.Title = "Stream";
}

@model ImageEmotions.Models.EmotionsViewModel
<script src="~/Scripts/highcharts.js"></script>

<div class="jumbotron">
    <div class="row">
        <div class="col-md-9 col-xs-12">
            <div id="container">
                <video autoplay="true" id="videoElement"></video>
            </div>
        </div>
        <div class="col-md-3 col-xs-12">
            <div id="sliding-container">
                <canvas id="canvas1"></canvas>
                <canvas id="canvas2"></canvas>
                <canvas id="canvas3"></canvas>
                <canvas id="grabFrameCanvas"></canvas>
            </div>
        </div>
    </div>

    <div id="chart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>

    @*<input class="btn btn-primary" id="tick" type="button" value="Tick" />*@
</div>

<script>

@* Settings *@

    const emotionParams = [
        {
            "name": "anger",
            "colour": "0xf0f",
        },
        {
            "name": "contempt",
            "colour": "0x888",
        },
        {
            "name": "disgust",
            "colour": "0xfff",
        },
        {
            "name": "fear",
            "colour": "0xf00",
        },
        {
            "name": "happiness",
            "colour": "0xff0",
        },
        {
            "name": "neutral",
            "colour": "0x0f0",
        },
        {
            "name": "sadness",
            "colour": "0x0ff",
        },
        {
            "name": "surprise",
            "colour": "0x00f",
        },
    ]

    const tickRate = 5000;
    const pointsOnChart = 10;

@* Webcam *@

    var imageCapture;

    //Init camera
    function getUserMedia() {
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(mediaStream => {
                document.querySelector('video').srcObject = mediaStream;

                const track = mediaStream.getVideoTracks()[0];
                imageCapture = new ImageCapture(track);
            })
            .catch(error => console.log(error));
    }
    getUserMedia();

    //Grab frame from webcam stream
    function grabFrame() {
        if (imageCapture) {
            imageCapture.grabFrame()
                .then(imageBitmap => {
                    insertCanvasImages(imageBitmap);
                    submitFrameForAnalysis();
                })
                .catch(error => console.log(error));
        }
    }

    //Insert and slide images down
    function insertCanvasImages(imageBitmap) {

        var mainCanvas = document.querySelector('#grabFrameCanvas');
        var canvas1 = document.querySelector('#canvas1');
        var canvas2 = document.querySelector('#canvas2');
        var canvas3 = document.querySelector('#canvas3');

        drawCanvas(canvas3, canvas2)
        drawCanvas(canvas2, canvas1)
        drawCanvas(canvas1, imageBitmap)
        drawCanvas(mainCanvas, imageBitmap)
    }

    //Display image on canvas
    function drawCanvas(canvas, img) {

        //TODO: clean up alignment and size
        canvas.width = getComputedStyle(canvas).width.split('px')[0];
        canvas.height = getComputedStyle(canvas).height.split('px')[0];
        let ratio = Math.min(canvas.width / img.width, canvas.height / img.height);
        let x = (canvas.width - img.width * ratio) / 2;
        let y = (canvas.height - img.height * ratio) / 2;
        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
        canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height,
            x, y, img.width * ratio, img.height * ratio);
    }



@* Image stream *@

    function submitFrameForAnalysis() {

        var image = $("#grabFrameCanvas")[0].toDataURL('image/png', 1.0)
        image = image.replace('data:image/png;base64,', '');

        var formData = new FormData();
        formData.append("image", image);

        request = $.ajax({
            type: "POST",
            url: '@Url.RouteUrl(new { controller = "Stream", action = "SubmitImage" })',
            data: formData,
            dataType: 'json',
            contentType: false,
            processData: false,
            success: function (result) {
                if (result != null && result.success != null) {
                    console.log("waddup")
                    updateSeriesWithResults(result.result)
                }
            },
            error: function (error) {
                console.log("doh: " + error)
            }
        });
    }

    //set main loop
    setInterval(grabFrame, tickRate)


@* Highcharts *@

    Highcharts.setOptions({
        global: {
            useUTC: false
        }
    });

    var chart = Highcharts.chart('chart', {
        chart: {
            type: 'spline',
            animation: Highcharts.svg, // don't animate in old IE
            marginRight: 10
        },
        title: {
            text: 'stream'
        },
        xAxis: {
            type: 'datetime',
            tickPixelInterval: 150
        },
        yAxis: {
            title: {
                text: 'Value'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        tooltip: {
            formatter: function () {
                return '<b>' + this.series.name + '</b><br/>' +
                    Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                    Highcharts.numberFormat(this.y, 2);
            }
        },
        legend: {
            enabled: true
        },
        exporting: {
            enabled: false
        },
        series: getMultipleRandomSeries()
    });

@* Chart data *@

    //update series with random data
    function updateSeries() {
        for (i = 0; i < chart.series.length; i++) {
            // set up the updating of the chart each second
            var line = chart.series[i];
            var x = (new Date()).getTime(), // current time
                y = Math.random();
            line.addPoint([x, y], false, true, true);
        }
        chart.redraw()
    }

    //Update series with response results
    function updateSeriesWithResults(results) {

        var scores = [0,0,0,0,0,0,0,0]
        if (results != "[]") {
            var scores = JSON.parse(results)[0].scores;
        }

        var x = (new Date()).getTime() // current time

        for (i = 0; i < chart.series.length; i++) {
            var line = chart.series[i];
            var y = scores[chart.series[i].name]
            line.addPoint([x, y], true, true, true);
        }
        chart.redraw()
    }

    //populate each series
    function getMultipleRandomSeries() {
        var series = [];
        for (i = 0; i < emotionParams.length; i++)
            series.push(getRandomSeries(i));
        return series;
    }

    //initialise series
    function getRandomSeries(i) {
        return {
            name: emotionParams[i].name,
            data:
            (function () {
                var data = [],
                    time = (new Date()).getTime(),
                    i;

                    for (i = -emotionParams.length; i <= 0; i += 1) {
                    data.push({
                        x: time,
                        y: 0
                    });
                }
                return data;
            }())
        }
    }

@* Page Events *@
    //$(function() {
    //    $("#tick").on("click", function () {
    //        breathe();
    //    })
    //})
</script>